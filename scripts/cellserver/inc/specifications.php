<?php

/*
 * MARS 3.0 SPECIFICATIONS PHP CODE
 * build 3.0.0.0 @ 2014-03-25 10:00
 * * rewritten from scratch
 */
define( 'SPECIFICATIONS_INTEGRATIONS', 
	'DB2,E2010,Enabler,HANA,IDB,Informix,Lotus,Mailbox,MSESE,MSExchange,MSSharePoint,MSSPS,MSSQL,MSVSSW,Oracle8,SAP,SAPDB,Stream,Sybase,VEAgent,VMWare' );
define( 'SPECIFICATIONS_DATALIST_PATTERN', 
	"(?P<comment>^#.*?\n)|(?P<key>^\s*?[A-Z]+)|(?:{(?P<items>(?:(?>[^{}]+)|(?R))*?)})|(?P<option>-\w+)|(?P<value>\S+)" );
define( 'SPECIFICATIONS_SCHEDULE_PATTERN', "(?P<option>\"?-\w+)|(?P<value>\S+)" );
define( 'SPECIFICATIONS_HOSTNAME_PATTERN', "\"%[^\"]\" %[^:]:\"%[^\"]" );
define( 'SPECIFICATIONS_PERMANENT_STRING', 'Permanent' );
define( 'SPECIFICATIONS_FILESYSTEM', 'FS' );
define( 'SPECIFICATIONS_DATALISTS', 'datalists' );
define( 'SPECIFICATIONS_SCHEDULES', 'schedules' );
define( 'SPECIFICATIONS_BARLISTS', 'barlists' );
define( 'SPECIFICATIONS_BARSCHEDULES', 'barschedules' );
define( 'SPECIFICATIONS_ERROR', 'Error in specification "%s": %s' );
define( 'SPECIFICATIONS_ERROR_NOT_EXISTS', 'Missing specification file for schedule file "%s".' );
define( 'SPECIFICATIONS_TYPE', serialize( array( 
	'DATALIST', 
	'BARLIST' ) ) );
define( 'SPECIFICATIONS_ERROR_INVALID', 'Specification "%s" is not valid.' );
define( 'SPECIFICATIONS_ERROR_NO_HOST', 'Error in specification "%s": Host definition missing.' );
define( 'SPECIFICATIONS_ERROR_MISSING_SCHEDULE', 'Error in specification "%s": Schedule file does not exist.' );
define( 'SPECIFICATIONS_ERROR_READING', 'Error reading "%s": %s' );
define( 'SPECIFICATIONS_ERROR_WRITE_DATALIST', 'Cannot write to specification file "%s".' );
define( 'SPECIFICATIONS_ERROR_WRITE_SCHEDULE', 'Cannot write to schedule file "%s".' );
define( 'SPECIFICATIONS_ERROR_WRITING', 'Error writing "%s": %s' );
define( 'SPECIFICATIONS_ERROR_NOT_IN_DB', 'Specification "%s" not found in database.' );
define( 'SPECIFICATIONS_LOG', 'SPECIFICATIONS: %s inserted, %s updated, %s removed.' );
define( 'SPECIFICATIONS_OMNI2ESL_FOLDER_NOT_EXISTS', 'Folder "%s" does not exist.' );
define( 'SPECIFICATIONS_OMNI2ESL_ALWAYS', 'Always' );
define( 'SPECIFICATIONS_OMNI2ESL_NEVER', 'Never' );
define( 'SPECIFICATIONS_OMNI2ESL_FULL', 'Full' );
define( 'SPECIFICATIONS_OMNI2ESL_INCR', 'Incr' );
define( 'SPECIFICATIONS_OMNI2ESL_NONRESTARTABLE', 'offline' );
define( 'SPECIFICATIONS_OMNI2ESL_INFO1', '#Automatic upload for backup information to ESL' );
define( 'SPECIFICATIONS_OMNI2ESL_INFO2', '#Generated by MARS 3.0 @ ' . @date( 'd.m.Y H:i' ) );
define( 'SPECIFICATIONS_OMNI2ESL_HEADER', 
	'System Name,Backup Method,Backup Name,Backup Scheduler,Tape Check Time,Backup Start Time,Backup Type,Service Tier,' . 
		'Scheduling Mon,Scheduling Tue,Scheduling Wed,Scheduling Thu,Scheduling Fri,Scheduling Sat,Scheduling Sun,Scheduling On Demand,' .
		'Restartable?,Restart Window,Backup Device,Backup Retention,Recovery Instructions,Comments' );
define( 'SPECIFICATIONS_OMNI2ESL', '"%s","DataProtector","%s","omniback","15:00","%s","%s","%s","%s","%s","%s","%s","%s","%s","%s","1","%s","12h","%s","%s","",""' );
define( 'SPECIFICATIONS_OMNI2ESL_CLIENT_HEADER', 'System Name,Backup Method,Backup Name,Client System Name' );
define( 'SPECIFICATIONS_OMNI2ESL_CLIENT', '"%s","DataProtector","%s","%s"' );
define( 'SPECIFICATIONS_OMNI2ESL_LOG', 'OMNI2ESL: %s specifications exported.' );

if ( strtoupper( substr(PHP_OS, 0, 3) ) === 'WIN' ) {
	define( 'SPECIFICATIONS_OMNI2ESL_FILE', '%s\esl_omni_obcheck.txt' );
	define( 'SPECIFICATIONS_OMNI2ESL_CLIENT_FILE', '%s\esl_omni_obcheck_client.txt' );
} else {
	define( 'SPECIFICATIONS_OMNI2ESL_FILE', '%s/esl_omni_obcheck.txt' );
	define( 'SPECIFICATIONS_OMNI2ESL_CLIENT_FILE', '%s/esl_omni_obcheck_client.txt' );
}

class mars_specification {
	var $application;
	var $fullname;
	var $integration;
	var $name;
	var $dpgroup;
	var $specification_file;
	var $schedule_file;
	var $specification_modified;
	var $schedule_modified;
	var $specification;
	var $parsed_specification;
	var $schedule;
	var $parsed_schedule;
	var $hostnames;
	var $devices;
	var $protection;
	var $periodicity;
	var $nextexecution;

	function mars_specification( $application, $name, $specification = '', $schedule = '' ) {
		$this->application = $application;
		$this->fullname = $name;
		$this->integration = '';
		$this->name = $name;
		if ( strpos( $this->name, ' ' ) ) {
			$integ = substr( $this->name, 0, strpos( $this->name, ' ' ) );
			if ( in_array( $integ, explode( ',', SPECIFICATIONS_INTEGRATIONS ) ) ) {
				$this->integration = $integ;
				$this->name = substr( $this->name, strlen( $this->integration ) + 1 );
			}
		}
		$this->dpgroup = '';
		$this->specification_file = '';
		$this->schedule_file = '';
		$this->specification_modified = '';
		$this->schedule_modified = '';
		$this->specification = $specification;
		$this->schedule = $schedule;
		$this->parsed_specification = '';
		$this->parsed_schedule = '';
		$this->hostnames = array();
		$this->devices = array();
		$this->protection = SPECIFICATIONS_PERMANENT_STRING;
		$this->periodicity = -1;
		$this->nextexecution = array();
	}

	function read_file() {
		try {
			if ( $this->integration == '' ) {
				$specifications_subdir = SPECIFICATIONS_DATALISTS;
				$schedules_subdir = SPECIFICATIONS_SCHEDULES;
			} else {
				$specifications_subdir = SPECIFICATIONS_BARLISTS . DIRECTORY_SEPARATOR . strtolower( $this->integration );
				$schedules_subdir = SPECIFICATIONS_BARSCHEDULES . DIRECTORY_SEPARATOR . strtolower( $this->integration );
			}
			$this->specification_file = $this->application->config[ 'OMNI_SERVER' ] . DIRECTORY_SEPARATOR 
				. $specifications_subdir . DIRECTORY_SEPARATOR . $this->name;
			$this->specification_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->specification_file );
			$this->schedule_file = $this->application->config[ 'OMNI_SERVER' ] . DIRECTORY_SEPARATOR 
				. $schedules_subdir . DIRECTORY_SEPARATOR . $this->name;
			$this->schedule_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->schedule_file );
			if ( !file_exists( $this->specification_file ) ) {throw new exception( 
					sprintf( SPECIFICATIONS_ERROR_NOT_EXISTS, $this->schedule_file ) );}
			$this->specification_modified = date( $this->application->config[ 'TIME_FORMAT' ], filemtime( $this->specification_file ) );
			$this->specification = $this->application->read_file( $this->specification_file );
			if ( !in_array( trim( substr( $this->specification, 0, 8 ) ), unserialize( SPECIFICATIONS_TYPE ) ) ) {throw new exception( 
				sprintf( SPECIFICATIONS_ERROR_INVALID, $this->specification_file ) );}
			$this->parse_specification( );
			if ( count( $this->hostnames ) == 0 ) {
				$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_NO_HOST, $this->specification_file ) );
			}
			if ( file_exists( $this->schedule_file ) ) {
				$this->schedule_modified = date( $this->application->config[ 'TIME_FORMAT' ], filemtime( $this->schedule_file ) );
				$this->schedule = $this->application->read_file( $this->schedule_file );
				$this->parse_schedule( );
				$this->periodicity = -1;
				$this->nextexecution = $this->get_nextexecution( );
				if ( $this->nextexecution ) {
					$nextexecution = $this->get_nextexecution( sprintf( "%s +1 day", $this->nextexecution[ 0 ][ 'date' ] ) );
					$this->periodicity = 
						( strtotime( $nextexecution[ 0 ][ 'date' ] ) - strtotime( $this->nextexecution[ 0 ][ 'date' ] ) ) / ( 24 * 60 * 60 );
				}
			} else {
#				$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_MISSING_SCHEDULE, $this->schedule_file ) );
			}
		}
		catch ( exception $e ) {
			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR, $this->name, $e->getmessage( ) ) );
			return false;
		}
		return true;
	}

	function write_file() {
		try {
			if ( $this->integration == '' ) {
				$specifications_subdir = SPECIFICATIONS_DATALISTS;
				$schedules_subdir = SPECIFICATIONS_SCHEDULES;
			} else {
				$specifications_subdir = SPECIFICATIONS_BARLISTS . DIRECTORY_SEPARATOR . strtolower( $this->integration );
				$schedules_subdir = SPECIFICATIONS_BARSCHEDULES . DIRECTORY_SEPARATOR . strtolower( $this->integration );
			}
			$this->specification_file = $this->application->config[ 'OMNI_SERVER' ] 
				. DIRECTORY_SEPARATOR . $specification_subdir . DIRECTORY_SEPARATOR . $this->name;
			$this->specification_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->specification_file );
			$this->schedule_file = $this->application->config[ 'OMNI_SERVER' ] 
				. DIRECTORY_SEPARATOR . $schedule_subdir . DIRECTORY_SEPARATOR . $this->name;
			$this->schedule_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->schedule_file );
			if ( !file_put_contents( $this->specification_file, $this->specification ) ) {throw new exception( 
					sprintf( SPECIFICATIONS_ERROR_WRITE_DATALIST, $this->specification_file ) );}
			if ( !file_put_contents( $this->schedule_file, $this->schedule ) ) {throw new exception( 
					sprintf( SPECIFICATIONS_ERROR_WRITE_SCHEDULE, $this->schedule_file ) );}
		}
		catch ( exception $e ) {
			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_WRITING, $this->name, $e->getmessage( ) ) );
			return false;
		}
		return true;
	}

	function read_database() {
		try {
			$this->specification_file = '';
			$this->schedule_file = '';
			$this->specification_modified = '';
			$this->schedule_modified = '';
			$sql = "select * from dataprotector_specifications where cellserver='%cellserver' and name='%name' limit 1;";
			$values = array( 
				'cellserver' => $this->application->cellserver, 
				'name' => $this->fullname );
			if ( $this->application->database->execute_query( $sql, $values ) == 0 ) {throw new exception( 
					sprintf( SPECIFICATIONS_ERROR_NOT_IN_DB, $this->fullname ) );}
			$this->integration = $this->application->database->rows[ 0 ][ 'type' ];
			$this->integration == SPECIFICATIONS_FILESYSTEM && $this->integration = '';
			$this->specification = $this->application->database->rows[ 0 ][ 'specification' ];
			$this->schedule = $this->application->database->rows[ 0 ][ 'schedule' ];
			$this->parse_specification( );
			$this->periodicity = -1;
			$this->nextexecution = $this->get_nextexecution( );
			if ( $this->nextexecution ) {
				$nextexecution = $this->get_nextexecution( sprintf( "%s +1 day", $this->nextexecution[ 0 ][ 'date' ] ) );
				$this->periodicity = ( strtotime( $nextexecution[ 0 ][ 'date' ] ) - strtotime( $this->nextexecution[ 0 ][ 'date' ] ) ) /
					 ( 24 * 60 * 60 );
			}
		}
		catch ( exception $e ) {
			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_READING, $this->name, $e->getmessage( ) ) );
			return false;
		}
		return true;
	}

	function write_database() {
		$result = false;
		try {
			$nextexecution = '';
			if ( $this->nextexecution ) {
				$nextexecution = date( $this->application->config[ 'TIME_FORMAT' ], 
					strtotime( sprintf( '%s %s', $this->nextexecution[ 0 ][ 'date' ], $this->nextexecution[ 0 ][ 'time' ] ) ) );
			}
			;
			$sql = "select name from config_customers where '%name' regexp specification and valid_until is null limit 1;";
			$values = array( 
				'name' => $this->fullname );
			if ( $this->application->database->execute_query( $sql, $values ) == 1 ) {
				$customer = $this->application->database->rows[ 0 ][ 'name' ];
			} else {
				$customer = '';
			}
			$sql = "select name from config_retentions where (customer='%customer' or customer is null) " .
				 "and ('%name' regexp specification or specification is null) and valid_until is null " .
				 "order by customer,ifnull(specification,'{general}') limit 1;";
			$values = array( 
				'customer' => $customer, 
				'name' => $this->fullname );
			if ( $this->application->database->execute_query( $sql, $values ) == 1 ) {
				$retention = $this->application->database->rows[ 0 ][ 'name' ];
			} else {
				$retention = '';
			}
			$sql = "select 
				@s:=(select ifnull(max(starttime),0) from _sessions where cellserver=s1.cellserver and specification=s1.specification and status not regexp 'progress' and bsr=100),
				@f:=(select ifnull(max(starttime),0) from _sessions where cellserver=s1.cellserver and specification=s1.specification and status not regexp 'progress' and bsr<100),
				count(s1.sessionid) as sessions,
				max(if(s1.starttime=greatest(@s,@f),s1.sessionid,null)) as lastsessionid,
				max(if(s1.starttime=@s,s1.sessionid,null)) as lastsuccessfulsessionid,
				ifnull(sum(if(s1.bsr<100 and s1.starttime>@s,1,0)),0) as failure,
				ifnull(sum(if(s1.bsr=100 and s1.starttime>@f,1,0)),0) as success
				from _sessions s1 where s1.cellserver='%cellserver' and s1.specification='%specification';";
			$values = array( 
				'cellserver' => $this->application->cellserver, 
				'specification' => $this->fullname );
			$result = $this->application->database->execute_query( $sql, $values );
			if ( $this->application->database->row_count == 1 ) {
				list ( $s,$f,$sessions,$lastsessionid,$lastsuccessfulsessionid, $failure, $success ) = $this->application->database->rows[ 0 ];
			} else {
				$lastsessionid = '';
				$lastsuccessfulsessionid = '';
				$success = $failure = 0;
			}
			$sql = "insert into dataprotector_specifications " .
				 "(cellserver,name,type,customer,retention,specification_modified,specification," .
				 "schedule_modified,schedule,hosts,hostnames,nextexecution,periodicity,protection," .
				 "dpgroup,lastsessionid,lastsuccessfulsessionid,success,failure) " .
				 "values('%cellserver','%name','%type',nullif('%customer',''),nullif('%retention','')," .
				 "nullif('%specification_modified',''),'%specification'," .
				 "nullif('%schedule_modified',''),nullif('%schedule',''),'%hosts','%hostnames'," .
				 "nullif('%nextexecution',''),'%periodicity','%protection',nullif('%dpgroup','')," . 
				 "nullif('%lastsessionid',''),nullif('%lastsuccessfulsessionid',''),'%success','%failure') " .
				 "on duplicate key update type='%type',customer=nullif('%customer',''),retention=nullif('%retention','')," .
				 "specification_modified=nullif('%specification_modified',''),specification='%specification'," .
				 "schedule_modified=nullif('%schedule_modified',''),schedule=nullif('%schedule',''), " .
				 "hosts='%hosts',hostnames='%hostnames',nextexecution=nullif('%nextexecution','')," .
				 "dpgroup=nullif('%dpgroup',''),periodicity='%periodicity',protection='%protection'," . 
				 "lastsessionid=nullif('%lastsessionid',''),lastsuccessfulsessionid=nullif('%lastsuccessfulsessionid','')," .
				 "success='%success',failure='%failure',updated_on='%updated_on',valid_until=null;";
			$values = array( 
				'cellserver' => $this->application->cellserver, 
				'name' => $this->fullname, 
				'type' => empty( $this->integration ) ? SPECIFICATIONS_FILESYSTEM : $this->integration, 
				'customer' => $customer, 
				'retention' => $retention, 
				'specification_modified' => $this->specification_modified, 
				'specification' => $this->application->database->escape_string( $this->specification ), 
				'schedule_modified' => $this->schedule_modified, 
				'schedule' => $this->application->database->escape_string( $this->schedule ), 
				'hosts' => count( $this->hostnames ), 
				'hostnames' => implode( ",", $this->hostnames ), 
				'nextexecution' => $nextexecution, 
				'periodicity' => $this->periodicity, 
				'protection' => $this->protection,
				'dpgroup' => $this->dpgroup,
				'lastsessionid' => $lastsessionid, 
				'lastsuccessfulsessionid' => $lastsuccessfulsessionid, 
				'success' => $success, 
				'failure' => $failure, 
				'updated_on' => $this->application->start_time );
			$result = $this->application->database->execute_query( $sql, $values );
		}
		catch ( exception $e ) {
			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_WRITING, $this->name, $e->getmessage( ) ) );
			return false;
		}
		return $result;
	}

	function parse( $text ) {
		$result = array();
		$match = array();
		$tokens = preg_match_all( '/' . SPECIFICATIONS_DATALIST_PATTERN . '/m', $text, $match );
		$i = 0;
		$key = '';
		$option = '';
		$value = '';
		while ( $i <= $tokens ) {
			if ( $i == $tokens ) {
				$action1 = 'key';
				$action2 = '#';
			} else {
				foreach ( array( 
					'comment', 
					'key', 
					'option', 
					'value', 
					'items' ) as $j ) {
					( $match[ $j ][ $i ] != '' ) && $action1 = $j;
				}
				$action2 = trim( $match[ $action1 ][ $i ] );
			}
			switch ( $action1 ) {
				case 'key':
					if ( ( $key == $action2 ) or ( isset( $result[ $key . '-S' ] ) ) ) {
						$result[ $key . '-S' ][ ] = $result[ $key ];
						unset( $result[ $key ] );
					}
					$key = strtoupper( $action2 );
					$option = '';
					$value = '';
					$key != '#' && $result[ $key ] = $value;
					break;
				case 'option':
					if ( $option == '' ) {
						if ( $key != '' and !is_array( $result[ $key ] ) ) {
							$result[ $key ] = ( $result[ $key ] == '' ? array() : array( 
								'name' => $result[ $key ] ) );
						}
					}
					$option = substr( $action2, 1 );
					$value = '';
					if ( $key == '' ) {
						$result[ $option ] = $value;
					} else {
						$result[ $key ][ $option ] = $value;
					}
					break;
				case 'value':
					$value = trim( $value . ' ' . $action2 );
					if ( $option == '' ) {
						$result[ $key ] = $value;
					} else {
						if ( $key == '' ) {
							$result[ $option ] = $value;
						} else {
							$result[ $key ][ $option ] = $value;
						}
					}
					( $option == 'protect' ) && $this->protection = $value;
					break;
				case 'items':
					if ( ( $key != '' ) and !is_array( $result[ $key ] ) ) {
						$result[ $key ] = ( $result[ $key ] == '' ? array() : array( 
							'name' => $result[ $key ] ) );
						$result[ $key ][ 'items' ] = $this->parse( $action2 );
					} else {
						$result[ 'items' ] = $this->parse( $action2 );
					}
					break;
			}
			$i++;
		}
		return $result;
	}

	function parse_specification() {
		if ( is_array( $this->parsed_specification ) ) return $this->parsed_specification;
		$specification = $this->parse( $this->specification );
		
		$keys = array_keys( $specification );
		foreach ( $keys as $key => $value ) {
			$keys[ $key ] = str_replace( '-S', '', $value );
		}
		$this->parsed_specification = array_combine( $keys, $specification );
		!empty( $this->parsed_specification[ 'GROUP' ] ) && $this->dpgroup = str_replace( '"', '', $this->parsed_specification[ 'GROUP' ] );
		foreach ( $this->parsed_specification[ 'DEVICE' ] as $device ) {
			isset( $device[ 'name' ] ) && $this->devices[ ] = $device[ 'name' ];
		}
		$this->devices = array_unique( $this->devices );
		foreach ( array( 
			'HOST', 
			'CLIENT', 
			'WINFS', 
			'FILESYSTEM', 
			'OMNIDB' ) as $hosttype ) {
			if ( !isset( $this->parsed_specification[ $hosttype ] ) ) continue;
			$hosts = isset( $this->parsed_specification[ $hosttype ][ 0 ] ) ? $this->parsed_specification[ $hosttype ] : array( 
				$this->parsed_specification[ $hosttype ] );
			foreach ( $hosts as $host ) {
				list ( $description, $hostname, $mountpoint ) = sscanf( $host[ 'name' ], SPECIFICATIONS_HOSTNAME_PATTERN );
				$this->hostnames[ ] = $hostname;
			}
		}
		$this->hostnames = array_unique( $this->hostnames );
		return $this->parsed_specification;
	}

	function parse_schedule() {
		if ( is_array( $this->parsed_schedule ) ) return $this->parsed_schedule;
		$schedule = array();
		$match = array();
		$tokens = preg_match_all( '/' . SPECIFICATIONS_SCHEDULE_PATTERN . '/m', $this->schedule, $match );
		$i = 0;
		$option = '';
		$value = '';
		$item = array();
		while ( $i < $tokens ) {
			foreach ( array( 
				'option', 
				'value' ) as $j ) {
				( $match[ $j ][ $i ] != '' ) && $action1 = $j;
			}
			$action2 = trim( $match[ $action1 ][ $i ] );
			switch ( $action1 ) {
				case 'option':
					$option = substr( $action2, 1 );
					$value = '';
					$item[ $option ] = $value;
					break;
				case 'value':
					$value = trim( $value . ' ' . $action2 );
					$item[ $option ] = $value;
					if ( $option == 'at' ) {
						$schedule[ ] = $item;
						$item = array();
					}
					break;
			}
			$i++;
		}
		$this->parsed_schedule = $schedule;
		return $this->parsed_schedule;
	}

	function is_scheduled( $date = 'today' ) {
		try {
			$result = false;
			$schedule = $this->parse_schedule( );
			$date = date( 'Y-m-d', strtotime( $date ) );
			list ( $yday, $weekday, $day, $month, $year ) = explode( ' ', date( 'z D j M Y', strtotime( $date ) ) );
			foreach ( $schedule as $item ) {
				if ( isset( $item[ 'disabled' ] ) ) {
					$result = false;
					break;
				}
				if ( isset( $item[ 'every' ] ) and isset( $item[ '4day' ] ) and in_array( $weekday, explode( ' ', $item[ '4day' ] ) ) ) {
					$firstday = date( 'z', strtotime( sprintf( '%s Jan %s', $item[ '4day' ], $year ) ) );
					if ( ( ( $yday - $firstday ) % 28 ) == 0 ) {
						list ( $mode, $value ) = each( $item );
						$result[ ] = array(
								'mode' => trim( $mode . ' ' . $value ),
								'date' => $date,
								'time' => $item[ 'at' ] );
					}
				}
				if ( isset( $item[ 'starting' ] ) and isset( $item[ 'every' ] ) and isset( $item[ 'day' ] ) and
					( isset( $item[ '2month' ] ) or isset( $item[ '3month' ] ) or isset( $item[ '4month' ] ) 
					or isset( $item[ '6month' ] ) or isset( $item[ '12month' ] ) ) ) {
						$emonth = 1;
						isset( $item[ '2month' ] )  && $emonth = 2;
						isset( $item[ '3month' ] )  && $emonth = 3;
						isset( $item[ '4month' ] ) && $emonth = 4; 
						isset( $item[ '6month' ] )  && $emonth = 6;
						isset( $item[ '12month' ] ) && $emonth = 12;
						$months = array( );
						list( $sday, $smonth,$syear ) = explode( ' ', $item[ 'starting' ] );
						for ( $m = 0; $m < 12; $m++) {
							( $smonth + $m - 1 ) % $emonth == 0 && 
								$months[ ] = date('M', strtotime( sprintf( '+%d months', $m ), 0 ) );
						}
				} else {
					unset( $months );
				}
				if ( isset( $item[ 'every' ] ) and isset( $item[ 'day' ] ) and ( ( $item[ 'day' ] == '' ) or ( $item[ 'day' ] == $day )
					or in_array( $day, explode( ' ', $item[ 'day' ] ) ) or in_array( $weekday, explode( ' ', $item[ 'day' ] ) ) )
					and ( !isset( $item[ 'month' ] ) or ( $item[ 'month' ] == $month ) or( in_array( $month, explode( ' ', $item[ 'month' ] ) ) ) )
					and ( !isset( $months ) or in_array( $month,  $months ) ) ) {
						list ( $mode, $value ) = each( $item );
						$result[ ] = array(
							'mode' => trim( $mode . ' ' . $value ),
							'date' => $date,
							'time' => $item[ 'at' ] );
				}
				if ( isset( $item[ 'only' ] ) and $item[ 'only' ] == $year and $item[ 'day' ] == $day and $item[ 'month' ] == $month ) {
					list ( $mode, $value ) = each( $item );
					$result[ ] = array(
						'mode' => trim( $mode . ' ' . $value ),
						'date' => $date,
						'time' => $item[ 'at' ] );
				}
				if ( isset( $item[ 'exclude' ] ) and ( !isset( $item[ 'year' ] ) or $item[ 'year' ] == $year )
					and	( isset( $item[ 'month' ] ) and $item[ 'month' ] == $month )
					and ( isset( $item[ 'day' ] ) and $item[ 'day' ] == $day ) ) {
						$result = false;
				}
				if ( isset( $item[ 'exclude' ] ) and !isset( $item[ 'year' ] ) and !isset( $item[ 'month' ] ) and ( isset( $item[ 'day' ] )
					and ( in_array( $day, explode( ' ', $item[ 'day' ] ) ) ) or in_array( $weekday, explode( ' ', $item[ 'day' ] ) ) ) ) {
						$result = false;
				}
				if ( isset( $item[ 'exclude' ] ) and !isset( $item[ 'year' ] ) and !isset( $item[ 'month' ] )
					and isset( $item[ '4day' ] ) and in_array( $weekday, explode( ' ', $item[ '4day' ] ) ) ) {
						$firstday = date( 'z', strtotime( sprintf( '%s Jan %s', $item[ '4day' ], $year ) ) );
						if ( ( ( $yday - $firstday ) % 28 ) == 0 ) {
							$result = false;
						}
				}
		}
	}
	catch ( exception $e ) {
		$this->application->log_error( $e->getmessage( ) );
	}
		return $result;
	}

	function get_nextexecution( $date = 'today' ) {
		$i = 1;
		$result = $this->is_scheduled( $date );
		while ( $i < 365 and !$result ) {
			$result = $this->is_scheduled( sprintf( '%s +%d day', $date, $i ) );
			$i++;
		}
		return $result;
	}

	function omni2esl( $client = false ) {
		$this->parse_specification( );
		$name = sprintf( '%s%s%s', strtolower( $this->integration ), ( $this->integration == '' ? '' : '/' ), $this->name );
		if ( $client ) {
			$lines = array();
			foreach ( $this->hostnames as $host ) {
				$lines[ ] = sprintf( SPECIFICATIONS_OMNI2ESL_CLIENT, $this->application->cellserver, $name, $host );
			}
			return $lines;
		}
		$nextexecution = $this->get_nextexecution( );
		$starttime = ( $nextexecution and isset( $nextexecution[ 0 ][ 'time' ] ) ) ? $nextexecution[ 0 ][ 'time' ] : '';
		$device = count( $this->devices ) ==  0 ? '' : trim( str_replace( '"', '', $this->devices[ 0 ] ) );
		$retention = $this->protection;
		if ( stristr( $retention, ' ' ) ) {
			list ( $interval, $value ) = explode( ' ', $retention );
			$retention = sprintf( '%s %s', $value, substr( $interval, 0, 1 ) );
		}
		$every = '';
		$mode = '';
		foreach ( $this->parse_schedule( ) as $item ) {
			if ( isset( $item[ 'every' ] ) ) $every = $item[ 'day' ];
			$mode = isset( $item[ 'full' ] ) ? SPECIFICATIONS_OMNI2ESL_FULL : SPECIFICATIONS_OMNI2ESL_INCR;
		}
		$managed = 1;
		$reportable = 1;
		$days = array();
		foreach ( array( 
			'Mon', 
			'Tue', 
			'Wed', 
			'Thu', 
			'Fri', 
			'Sat', 
			'Sun' ) as $day ) {
			$days[ $day ] = stristr( $every, $day ) ? 1 : 0;
		}
		$min = $max = 0;
		if ( isset( $this->parsed_specification[ 'DYNAMIC' ] ) ) list ( $min, $max ) = explode( ' ', 
			$this->parsed_specification[ 'DYNAMIC' ] );
		$restartable = stristr( $this->name, SPECIFICATIONS_OMNI2ESL_NONRESTARTABLE ) ? SPECIFICATIONS_OMNI2ESL_NEVER : SPECIFICATIONS_OMNI2ESL_ALWAYS;
		$line = sprintf( SPECIFICATIONS_OMNI2ESL, $this->application->cellserver, $name, $starttime, $mode, "98%",
			$days[ 'Mon' ], $days[ 'Tue' ], $days[ 'Wed' ], $days[ 'Thu' ], $days[ 'Fri' ], $days[ 'Sat' ], $days[ 'Sun' ], $restartable, $device, $retention );
		return $line;
	}
}

function read_specifications( $application ) {
	$integs = explode( ',', SPECIFICATIONS_INTEGRATIONS );
	$lines = array();
	$files = array_merge( glob( $application->config[ 'OMNI_SERVER' ] . DIRECTORY_SEPARATOR . SPECIFICATIONS_DATALISTS . DIRECTORY_SEPARATOR .'*' ), 
		glob( $application->config[ 'OMNI_SERVER' ] . DIRECTORY_SEPARATOR . SPECIFICATIONS_SCHEDULES . DIRECTORY_SEPARATOR . '*' ) );
	foreach ( $files as $file ) {
		if ( is_file( $file ) ) $lines[ ] = basename( $file );
	}
	foreach ( $integs as $integ ) {
		$specificationdir = $application->config[ 'OMNI_SERVER' ] . DIRECTORY_SEPARATOR 
			. SPECIFICATIONS_BARLISTS . DIRECTORY_SEPARATOR . strtolower( $integ );
		$scheduledir = $application->config[ 'OMNI_SERVER' ] . DIRECTORY_SEPARATOR 
			. SPECIFICATIONS_BARSCHEDULES . DIRECTORY_SEPARATOR . strtolower( $integ );
		$files = array_merge( glob( $scheduledir . DIRECTORY_SEPARATOR . '*' ), glob( $specificationdir . DIRECTORY_SEPARATOR . '*' ) );
		$files = array_merge( glob( $scheduledir . DIRECTORY_SEPARATOR . '*' ), glob( $specificationdir . DIRECTORY_SEPARATOR . '*' ) );
		foreach ( $files as $file ) {
			if ( is_file( $file ) ) $lines[ ] = sprintf( '%s %s', $integ, basename( $file ) );
		}
		$lines = array_unique( $lines );
	}
	$i = $u = 0;
	foreach ( $lines as $line ) {
		$specification = new mars_specification( $application, $line );
		if ( $specification->read_file( ) ) {
			$result = $specification->write_database( );
			( $result == 1 ) && $i++;
			( $result == 2 ) && $u++;
		}
	}
	$sql = "update dataprotector_specifications set valid_until=updated_on where id in (select id from (" .
		 "select id from dataprotector_specifications where cellserver='%cellserver' " .
		 "and updated_on<'%updated_on' and valid_until is null) d order by id);";
	$values = array( 
		'cellserver' => $application->cellserver, 
		'updated_on' => $application->start_time );
	$d = $application->database->execute_query( $sql, $values );
	$message = sprintf( SPECIFICATIONS_LOG, $i, $u, $d );
	$application->log_action( $message );
	return true;
}

function omni2esl( $application ) {
	if ( !is_dir( $application->config[ 'OMNI2ESL' ] ) ) {
		$application->log_action( sprintf( SPECIFICATIONS_OMNI2ESL_FOLDER_NOT_EXISTS, $application->config[ 'OMNI2ESL' ] ) );
		return false;
	}
	$eslomni = sprintf( SPECIFICATIONS_OMNI2ESL_FILE, $application->config[ 'OMNI2ESL' ] );
	$eslomniclient = sprintf( SPECIFICATIONS_OMNI2ESL_CLIENT_FILE, $application->config[ 'OMNI2ESL' ] );
	file_exists( $eslomni ) && unlink( $eslomni );
	file_exists( $eslomniclient ) && unlink( $eslomniclient );
	$application->append_file( $eslomni, SPECIFICATIONS_OMNI2ESL_INFO1 );
	$application->append_file( $eslomni, SPECIFICATIONS_OMNI2ESL_INFO2 );
	$application->append_file( $eslomni, SPECIFICATIONS_OMNI2ESL_HEADER );
	$application->append_file( $eslomniclient, SPECIFICATIONS_OMNI2ESL_INFO1 );
	$application->append_file( $eslomniclient, SPECIFICATIONS_OMNI2ESL_INFO2 );
	$application->append_file( $eslomniclient, SPECIFICATIONS_OMNI2ESL_CLIENT_HEADER );
	$sql = "select name from dataprotector_specifications where cellserver='%cellserver' and valid_until is null order by name;";
	$values = array( 
		'cellserver' => $application->cellserver );
	$application->database->execute_query( $sql, $values );
	$i = 0;
	foreach ( $application->database->rows as $row ) {
		$specification = new mars_specification( $application, $row[ 'name' ] );
		$specification->read_database( );
		$line = $specification->omni2esl( );
		$application->append_file( $eslomni, $line );
		foreach ( $specification->omni2esl( true ) as $line ) {
			$application->append_file( $eslomniclient, $line );
		}
		$i++;
	}
	$message = sprintf( SPECIFICATIONS_OMNI2ESL_LOG, $i );
	$application->log_action( $message );
	return true;
}

